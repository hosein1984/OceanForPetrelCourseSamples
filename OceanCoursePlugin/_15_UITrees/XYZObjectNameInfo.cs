using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Slb.Ocean.Petrel.UI;

namespace OceanCoursePlugin._15_UITrees
{
	/// <summary>
	/// This class provides the naming information for domain objects and Slb.Ocean.Petrel.UI.ToggleWindows.
	/// </summary>
	/// <remarks>
	/// In many cases the Name and DisplayName will be identical. However, there
	/// may be a need to append the DisplayName with some additional information
	/// about the object's state, etc. For example, a custom window might want to
	/// show in its DisplayName what Z-domain the window is using. A read-only implementation
	/// Slb.Ocean.Petrel.UI.DefaultNameInfo provided.
	/// </remarks>
	internal class XYZObjectNameInfo : NameInfo
	{
		private XYZObject item;

		public XYZObjectNameInfo(XYZObject item)
		{
			if (item == null)
				throw new ArgumentNullException(nameof(item));

			this.item = item;
		}

		/// <summary>
		/// Gets whether the name of the domain object can be changed.
		/// </summary>
		public override bool CanChangeName => true;

	    /// <summary>
		///  Defines the display name of the object, usually displayed in the Petrel explorer.
		/// </summary>
		/// <remarks>
		///  Performance note: Keep the implementation very lightweight since this method
		///  is called frequently by the framework.
		/// </remarks>
		public override string DisplayName => this.Name;

	    /// <summary>
		///  Gets and sets the name of the domain object. It is shown on the settings
		///  page.
		/// </summary>
		/// <exception cref="System.InvalidOperationException">
		///  May be thrown on set if Slb.Ocean.Petrel.UI.NameInfo.CanChangeName returns
		///  false.
		/// </exception>
		/// <exception cref="System.ArgumentException">
		/// May be thrown if attempting to set empty string value.
		/// </exception>
		/// <exception cref="System.ArgumentNullException">
		/// May be thrown if attempting to set null value.
		/// </exception>
		/// <remarks>
		/// Domain object must raise Slb.Ocean.Petrel.UI.NameInfo.NameChanged in case
		/// of changing its name.  If this property is set to an empty string, it's up
		/// to the domain object itself to either just keep the empty name or create
		/// an autogenerated one. This is e.g. how Petrel's 'Auto name all' feature works.
		/// </remarks>
		public override string Name
		{
			get
			{
				return item.Name;
			}

			set
			{
				if (item.Name != value)
				{
					item.Name = value;
					OnNameChanged(item);
				}
			}
		}

		/// <summary>
		/// Gets the type name of the domain object. It is shown on the settings page.
		/// </summary>
		public override string TypeName => item.GetType().Name;
	}
}
